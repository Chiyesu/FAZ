@page "/"
@using Data 
@inject TeamServices teamServices 
@inject MatchServices matchServices 
@inject PlayerServices playerServices 

<PageTitle>Home</PageTitle>

<style>
    .card-deck {
        display: flex;
        overflow-x: auto;
        gap: 20px;
        padding-bottom: 20px;
    }

    .card {
        background-color: #f8f9fa;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 300px; /* Fixed width for cards */
        min-width: 300px; /* Minimum width for cards */
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .card:hover {
        transform: scale(1.02); /* Slightly larger on hover */
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2); /* Enhanced shadow on hover */
    }

    .card-title {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .card-text {
        font-size: 0.9rem;
        color: #6c757d; /* Text color */
    }
</style>

<div class="container">
    <div class="row">
        <div class="col">
            <div class="py-4 text-center">
                <h1 class="display-4">Football Association Of Zambia - FAZ</h1>
            </div>
        </div>
    </div>

    <div class="alert alert-info text-center">
        The Football Association Of Zambia - FAZ Information System
    </div>

    <h2 class="mt-4">Latest Matches</h2>

    <div class="card-deck">
        @foreach (var match in matches)
        {
            var homeTeam = teams.FirstOrDefault(t => t.TeamId == match.HostTeamId);
            var awayTeam = teams.FirstOrDefault(t => t.TeamId == match.GuestTeamId);

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@homeTeam.TeamName vs @awayTeam.TeamName</h5>
                    <p class="card-text">Date: @match.DatePlayed.ToShortDateString()</p>
                    <button class="btn btn-primary" @onclick="() => ShowMatchDetails(match)">View Details</button>
                </div>
            </div>
        }
    </div>

    @if (selectedMatch != null)
    {
        var homeTeam = teams.FirstOrDefault(t => t.TeamId == selectedMatch.HostTeamId);
        var awayTeam = teams.FirstOrDefault(t => t.TeamId == selectedMatch.GuestTeamId);

        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">@homeTeam.TeamName vs @awayTeam.TeamName</h5>
                <p>Date: @selectedMatch.DatePlayed.ToShortDateString()</p>
                <p>Final Result: @selectedMatch.FinalResult</p>
                <button class="btn btn-secondary" @onclick="ClearSelectedMatch">Close</button>
            </div>
        </div>
    }
    else
    {
        <div class="card mt-4">
            <div class="card-body">
                <p class="text-muted">Select a match to view details.</p>
            </div>
        </div>
    }

    <h2 class="mt-4">Latest News</h2>

    <div class="card-deck">
        @foreach (var news in newsArticles)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@news.Title</h5>
                    <p class="card-text">@news.Content</p>
                    <button class="btn btn-primary">Read More</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    List<Team> teams = new List<Team>();
    List<Match> matches = new List<Match>(); 
    Match selectedMatch;
    List<News> newsArticles = new List<News>(); // List to store news articles

    protected override async Task OnInitializedAsync()
    {
        teams = teamServices.Get();
        matches = matchServices.Get();
        newsArticles = matchServices.Get(); // Assuming GetLatestNews method exists in MatchServices
    }

    void ShowMatchDetails(Match match)
    {
        selectedMatch = match;
    }

    void ClearSelectedMatch()
    {
        selectedMatch = null;
    }
}
